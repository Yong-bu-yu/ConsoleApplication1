using System;
using System.Runtime.Remoting;
namespace 实验
{
    //定义一个方法输出所创建的应用域
    public class MyType : MarshalByRefObject
    {
        public MyType()
        {
            Console.WriteLine("Created an instance of MyType in an AppDomain with the ");
            Console.WriteLine("hash code {0}", AppDomain.CurrentDomain.GetHashCode());
            Console.WriteLine();
        }
        public int GetAppDomainHashCode()
        {
            return AppDomain.CurrentDomain.GetHashCode();
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("The hash code of the default AppDomain is {0}.", AppDomain.CurrentDomain.GetHashCode());
            //创建另外一个AppDomain
            AppDomain domain = AppDomain.CreateDomain("AnotherDomain", null, (AppDomainSetup)null);
            //在名称为ObjectHandleAssembly的程序集中创建一个MyType实例
            ObjectHandle obj = domain.CreateInstance("Demo", "MyType");
            MyType testObj = (MyType)obj.Unwrap();
            if (RemotingServices.IsTransparentProxy(testObj))
                Console.WriteLine("The unwrapped object is a proxy.");
            else
                Console.WriteLine("The unwrapped object in not a proxy.");
            Console.WriteLine("Calling a method no the object located in an AppDomain with the hash code ");
            Console.WriteLine(testObj.GetAppDomainHashCode());
        }
    }
}
